class Solution:
    
    # The main idea is that if many initials any in the same
    # connected component, removing 1 of them will make no changes
    # since the removed initial will eventually be affected
    # by the other initials
    
    # It only changes when an initial is alone in its connected
    # component. We will remove the initial with largest connected
    # component, and smallest index.
    # If no such initial is found, then we return the minimum initial
    
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        
        # Convert adjacency matrix into adjacency list
        G = [[] for _ in range(n)]
        for i in range(n):
            for j in range(n):
                if i != j and graph[i][j] == 1:
                    G[i].append(j)
                    
        # Mark if a node is the initial node
        isInit = [False] * n
        for i in initial:
            isInit[i] = True
        
        # Mark the size of connected component
        sizes = [0] * n
        visited = [False] * n

        ans = -1
                
        # This function returns the size and number of
        # initials in the connected component
        def findSize(i):
            visited[i] = True
            count = 1
            inits = 1 if isInit[i] else 0
            for j in G[i]:
                if not visited[j]:
                    j_count, j_inits = findSize(j)
                    count += j_count
                    inits += j_inits
            return count, inits
        
        # For each initial
        for i in initial:
            if not visited[i]:
                count, inits = findSize(i)
                # If there are many initials here, no changes 
                # are made if we remove it.
                if inits > 1:
                    continue
                # Otherwise we save it if its size is larger than
                # current answer
                if ans == -1 or sizes[ans] < count or (sizes[ans] == count and ans > i):
                    ans = i
                    sizes[i] = count
        if ans != -1:
            return ans
        return min(initial)
                    
        
        
